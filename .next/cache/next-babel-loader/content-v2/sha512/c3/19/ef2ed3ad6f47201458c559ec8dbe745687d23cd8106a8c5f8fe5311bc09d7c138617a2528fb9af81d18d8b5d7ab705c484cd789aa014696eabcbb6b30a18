{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\documents\\\\NextJS\\\\Next-js-proj\\\\pages\\\\[meetupid]\\\\index.js\";\nimport { useRouter } from \"next/router\";\nimport MeetUpDetails from \"../../components/meetups/MeetUpDetails\";\nimport { MongoClient } from \"mongodb\";\nexport async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: true\n  };\n}\nexport async function getStaticProps() {\n  const client = await MongoClient.connect('mongodb+srv://chm:12345@cluster0.lgemeim.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  console.log(meetups);\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => {\n        return {\n          title: meetup.title,\n          id: meetup._id.toString(),\n          address: meetup.address,\n          image: meetup.image,\n          description: meetup.description\n        };\n      })\n    },\n    revalidate: 5\n  };\n}\nexport default function MeetUp(props) {\n  const router = useRouter();\n  const meetupid = router.query.meetupid;\n  let meetup = {};\n  props.meetups.map(item => {\n    console.log(item);\n    if (item.id === meetupid) meetup = item;\n  });\n  if (meetup === undefined) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Not Found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 37\n  }, this); // console.log(meetup);\n\n  return /*#__PURE__*/_jsxDEV(MeetUpDetails, {\n    id: meetup.id,\n    image: meetup.image,\n    title: meetup.title,\n    address: meetup.address,\n    description: meetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 13\n  }, this);\n}","map":{"version":3,"sources":["D:/documents/NextJS/Next-js-proj/pages/[meetupid]/index.js"],"names":["useRouter","MeetUpDetails","MongoClient","getStaticPaths","paths","fallback","getStaticProps","client","connect","db","meetupsCollection","collection","meetups","find","toArray","console","log","close","props","map","meetup","title","id","_id","toString","address","image","description","revalidate","MeetUp","router","meetupid","query","item","undefined"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AAEA,SAASC,WAAT,QAA4B,SAA5B;AAEA,OAAO,eAAeC,cAAf,GAA+B;AAClC,SAAO;AACHC,IAAAA,KAAK,EAAE,EADJ;AAEHC,IAAAA,QAAQ,EAAE;AAFP,GAAP;AAIH;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoB,0FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,GAAyBC,OAAzB,EAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAL,EAAAA,MAAM,CAACU,KAAP;AACA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLN,MAAAA,OAAO,EAAEA,OAAO,CAACO,GAAR,CAAaC,MAAD,IAAY;AAC/B,eAAO;AACLC,UAAAA,KAAK,EAAED,MAAM,CAACC,KADT;AAELC,UAAAA,EAAE,EAAEF,MAAM,CAACG,GAAP,CAAWC,QAAX,EAFC;AAGLC,UAAAA,OAAO,EAAEL,MAAM,CAACK,OAHX;AAILC,UAAAA,KAAK,EAAEN,MAAM,CAACM,KAJT;AAKLC,UAAAA,WAAW,EAAEP,MAAM,CAACO;AALf,SAAP;AAOD,OARQ;AADJ,KADF;AAYLC,IAAAA,UAAU,EAAE;AAZP,GAAP;AAcD;AAGD,eAAe,SAASC,MAAT,CAAgBX,KAAhB,EAAsB;AAEjC,QAAMY,MAAM,GAAG9B,SAAS,EAAxB;AACA,QAAM+B,QAAQ,GAAGD,MAAM,CAACE,KAAP,CAAaD,QAA9B;AACA,MAAIX,MAAM,GAAG,EAAb;AACDF,EAAAA,KAAK,CAACN,OAAN,CAAcO,GAAd,CAAmBc,IAAD,IAAQ;AACzBlB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAZ;AACI,QAAGA,IAAI,CAACX,EAAL,KAAYS,QAAf,EAAyBX,MAAM,GAAGa,IAAT;AAC5B,GAHF;AAIC,MAAGb,MAAM,KAAKc,SAAd,EAAyB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CATQ,CAUjC;;AACA,sBAAQ,QAAC,aAAD;AAAe,IAAA,EAAE,EAAEd,MAAM,CAACE,EAA1B;AAA8B,IAAA,KAAK,EAAEF,MAAM,CAACM,KAA5C;AAAmD,IAAA,KAAK,EAAEN,MAAM,CAACC,KAAjE;AAAwE,IAAA,OAAO,EAAED,MAAM,CAACK,OAAxF;AAAiG,IAAA,WAAW,EAAEL,MAAM,CAACO;AAArH;AAAA;AAAA;AAAA;AAAA,UAAR;AACH","sourcesContent":["import { useRouter } from \"next/router\"\r\nimport MeetUpDetails from \"../../components/meetups/MeetUpDetails\";\r\n\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nexport async function getStaticPaths(){\r\n    return {\r\n        paths: [],\r\n        fallback: true\r\n    }\r\n}\r\n\r\nexport async function getStaticProps() {\r\n  const client = await MongoClient.connect('mongodb+srv://chm:12345@cluster0.lgemeim.mongodb.net/meetups?retryWrites=true&w=majority');\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find().toArray();\r\n  console.log(meetups);\r\n  client.close();\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meetup) => {\r\n        return {\r\n          title: meetup.title,\r\n          id: meetup._id.toString(),\r\n          address: meetup.address,\r\n          image: meetup.image,\r\n          description: meetup.description\r\n        };\r\n      }),\r\n    },\r\n    revalidate: 5\r\n  };\r\n}\r\n\r\n\r\nexport default function MeetUp(props){\r\n    \r\n    const router = useRouter();\r\n    const meetupid = router.query.meetupid;\r\n    let meetup = {};\r\n   props.meetups.map((item)=>{\r\n    console.log(item)\r\n        if(item.id === meetupid) meetup = item;\r\n    })\r\n    if(meetup === undefined) return <h2>Not Found</h2>\r\n    // console.log(meetup);\r\n    return  <MeetUpDetails id={meetup.id} image={meetup.image} title={meetup.title} address={meetup.address} description={meetup.description}/>\r\n}"]},"metadata":{},"sourceType":"module"}